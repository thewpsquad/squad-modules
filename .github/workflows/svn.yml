name: Sync SVN to GitHub on Release

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours
  workflow_dispatch:  # Allows manual triggering

env:
  SVN_REPO_URL: https://plugins.svn.wordpress.org/squad-modules-for-divi/
  GITHUB_REPO: thewpsquad/squad-modules

jobs:
  sync-svn-to-github:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      - name: Install SVN
        run: sudo apt-get install subversion

      - name: Get latest SVN version
        id: svn_version
        run: |
          LATEST_VERSION=$(svn ls ${{ env.SVN_REPO_URL }}/tags | sort -V | tail -n 1 | sed 's/\///g')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Check if update is needed
        id: check_update
        run: |
          LATEST_GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "${{ steps.svn_version.outputs.LATEST_VERSION }}" != "$LATEST_GIT_TAG" ]; then
            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
          else
            echo "UPDATE_NEEDED=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync SVN to GitHub
        if: steps.check_update.outputs.UPDATE_NEEDED == 'true'
        run: |
          VERSION=${{ steps.svn_version.outputs.LATEST_VERSION }}
          
          # Delete all files and folders except specified ones
          find . -mindepth 1 -maxdepth 1 \
            ! -name '.git' \
            ! -name '.github' \
            ! -name 'readme.md' \
            ! -name 'LICENSE' \
            ! -name 'CODE_OF_CONDUCT.md' \
            -exec rm -rf {} +
          
          # Export the new version from SVN
          svn export ${{ env.SVN_REPO_URL }}/tags/${VERSION} .
          
          # Stage changes
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Import version ${VERSION} from SVN"
          git tag ${VERSION}

      - name: Push changes
        if: steps.check_update.outputs.UPDATE_NEEDED == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create Release
        if: steps.check_update.outputs.UPDATE_NEEDED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.svn_version.outputs.LATEST_VERSION }}
          release_name: Release ${{ steps.svn_version.outputs.LATEST_VERSION }}
          draft: false
          prerelease: false
