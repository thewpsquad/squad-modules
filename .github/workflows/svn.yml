name: Sync SVN to GitHub

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours
  workflow_dispatch:  # Allows manual triggering

env:
  SVN_REPO_URL: https://plugins.svn.wordpress.org/squad-modules-for-divi/
  GITHUB_REPO: thewpsquad/squad-modules

jobs:
  sync-svn-to-github:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install SVN
        run: sudo apt-get install subversion

      - name: Sync SVN to GitHub
        run: |
          # Function to copy a specific version from SVN to Git
          copy_version() {
            VERSION=$1
            echo "Copying version $VERSION"
          
            # Create a temporary directory for SVN export
            TEMP_DIR=$(mktemp -d)
          
            # Export the SVN tag to the temporary directory
            svn export ${{ env.SVN_REPO_URL }}/tags/$VERSION $TEMP_DIR
          
            # Delete all files and folders in the current directory except specified ones
            find . -mindepth 1 -maxdepth 1 \
              ! -name '.git' \
              ! -name '.github' \
              ! -name 'README.md' \
              ! -name 'LICENSE' \
              ! -name 'CODE_OF_CONDUCT.md' \
              -exec rm -rf {} +
          
            # Copy files from the temporary directory to the current directory
            rsync -av --exclude='.svn' $TEMP_DIR/ ./
          
            # Remove the temporary directory
            rm -rf $TEMP_DIR
          
            git add .
            git commit -m "Import version $VERSION from SVN"
            git tag $VERSION
          }

          # Get all SVN tags, excluding trunk
          SVN_TAGS=$(svn ls ${{ env.SVN_REPO_URL }}/tags | grep -v '^trunk/' | sort -V)

          # Get all Git tags
          GIT_TAGS=$(git tag | sort -V)

          # Compare and sync new tags
          for SVN_TAG in $SVN_TAGS
          do
            SVN_TAG=${SVN_TAG%/}
            if [[ "$SVN_TAG" > "1.0.0" || "$SVN_TAG" == "1.0.0" ]]
            then
              if ! echo "$GIT_TAGS" | grep -q "^${SVN_TAG}$"; then
                copy_version $SVN_TAG
              else
                echo "Skipping existing tag $SVN_TAG"
              fi
            fi
          done

      - name: Push changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git push origin main --tags

      - name: Create Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAGS=$(git tag --points-at HEAD)
          for TAG in $NEW_TAGS
          do
            gh release create $TAG \
              --title "Release $TAG" \
              --notes "This is an automatic release created from SVN tag $TAG" \
              --generate-notes
          done
